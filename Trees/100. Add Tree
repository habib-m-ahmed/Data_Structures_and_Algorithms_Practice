/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        
        
        /*
        
        Algorithm:
        
        Remmeber the following 2 things: BASE CASE AND RECURSIVE CALL
        
        Our base case is if p is null and q is null then we return true since they are the same tree
        The next case is if either one of p or q is null then we return false because if only one is null and the other isn't then they are clearly not the same tree
        
        Lastly, we now check if p does not equal q and then return false
        
        The only thing left to do is to check if the left and right subtrees are the same so we make a recursive call to them in our return statement
        
        */
        
        //case 1
        if(p==null && q==null){
            return true;
        }
        
        //case 2
        else if(p==null || q==null){
            return false;
        }
        
        else if(p.val != q.val){
            return false;
        }
        
        //now we want to check the left and right subtrees to make sure they are the same as well
        //this is where our recursive call comes in
        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
        
        
        /*
        Time complexity: O(n) since having to iterate through every node in the tree in our worst case
        Space complexity: O(1)
        */
        
        
        
    }
}
