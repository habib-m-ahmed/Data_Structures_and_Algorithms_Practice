/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */




public class Solution {
    public boolean hasCycle(ListNode head) {
        
        
        /*
        Algorithm: 
        
        good video: https://www.youtube.com/watch?v=sMqEwkpvJvQ
        
        With these cycle type questions, we normally have 2 pointers: a fast pointer and a slow pointer. The fast pointer moves twice as fast as the slow pointer (fast_pointer = head.next.next vs. slow_pointer  = head.next)
        
        Eventually what happens is that the fast and slow pointer will always end up meeting on a node if there is a cycle. 
        
        It does not matter what node the two pointers start on. They will always meet if there is a cycle
        */
        
        
        if(head == null){
            return false;
        }
        
        //the two pointers can start anywhere, lets choose head
        ListNode fast_pointer = head;
        ListNode slow_pointer = head;
        
        while(fast_pointer != null && fast_pointer.next != null){
            
            //slow pointer moves one space
            slow_pointer = slow_pointer.next;
            
            //fast pointer moves two spaces
            fast_pointer = fast_pointer.next.next;
            
            //if they ever meet then there is a cycle
            if(slow_pointer == fast_pointer){
                return true;
            }
            
            
        }
        
        return false;
        
        
    }
}

/*

Time complexity: O(n) due to while loop
Space complexity: O(1)

*/
